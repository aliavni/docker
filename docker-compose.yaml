version: "3.8"

services:
  db:
    container_name: docker-postgres
    image: postgres:16
    ports:
      - 5433:5432
    restart: always
    env_file:
      - .env
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d postgres -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  python:
    container_name: python
    build:
      context: .
    networks:
      - backend
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - .env

  trino:
    container_name: trino
    ports:
      - "8080:8080"
    image: "trinodb/trino:444"
    volumes:
      - ./docker/trino/etc:/usr/lib/trino/etc:ro
      - ./docker/trino/catalog:/etc/trino/catalog
    environment:
      - CATALOG_MANAGEMENT=dynamic
    networks:
      - backend

  spark-master:
    container_name: spark-master
    build: ./docker/spark
    ports:
      - "9090:8080"
      - "7077:7077"
      - "10000:10000"
    volumes:
       - ./apps:/opt/spark-apps
       - ./data:/opt/spark-data
    environment:
      - SPARK_LOCAL_IP=spark-master
      - SPARK_WORKLOAD=master
    networks:
      - backend
  spark-worker-a:
    build: ./docker/spark
    env_file:
      - .env
    ports:
      - "9091:8080"
      - "7001:7000"
    depends_on:
      - spark-master
    environment:
      - SPARK_WORKLOAD=worker
      - SPARK_LOCAL_IP=spark-worker-a
    volumes:
       - ./apps:/opt/spark-apps
       - ./data:/opt/spark-data
    networks:
      - backend
  spark-worker-b:
    build: ./docker/spark
    ports:
      - "9092:8080"
      - "7002:7000"
    depends_on:
      - spark-master
    environment:
      - SPARK_WORKLOAD=worker
      - SPARK_LOCAL_IP=spark-worker-b
    volumes:
        - ./apps:/opt/spark-apps
        - ./data:/opt/spark-data
    networks:
      - backend

  jupyterlab:
    container_name: jupyterlab
    build: ./docker/jupyter
    environment:
      - JUPYTER_PORT=8089
    volumes:
      - ./notebooks:$LAB_HOME
      - ./data:$LAB_HOME/data
    env_file:
      - .env
    ports:
      - "8089:8089"
    networks:
      - backend

  hue:
    image: gethue/hue:20240418-140101
    hostname: hue
    container_name: hue
    dns: 8.8.8.8
    ports:
      - "8888:8888"
    depends_on:
     - db
    volumes:
      - ./docker/hue/hue.ini:/usr/share/hue/desktop/conf/z-hue.ini
    networks:
     - backend

  hadoop-namenode:
    image: apache/hadoop:3
    hostname: namenode
    command: ["hdfs", "namenode"]
    ports:
      - 9870:9870
    env_file:
      - ./docker/hadoop/config
    environment:
        ENSURE_NAMENODE_DIR: "/tmp/hadoop-root/dfs/name"
    networks:
     - backend
  hadoop-datanode:
    image: apache/hadoop:3
    command: ["hdfs", "datanode"]
    env_file:
      - ./docker/hadoop/config
    networks:
     - backend
  hadoop-resourcemanager:
    image: apache/hadoop:3
    hostname: resourcemanager
    command: ["yarn", "resourcemanager"]
    ports:
       - 8088:8088
    env_file:
      - ./docker/hadoop/config
    volumes:
      - ./test.sh:/opt/test.sh
    networks:
     - backend
  hadoop-nodemanager:
    image: apache/hadoop:3
    command: ["yarn", "nodemanager"]
    env_file:
      - ./docker/hadoop/config
    networks:
     - backend

volumes:
  pgdata:

networks:
  backend:
